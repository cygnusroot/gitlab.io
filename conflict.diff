diff --cc app/assets/javascripts/ci_variable_list/ci_variable_list.js
index e46478ddb9,1427cbaef5..0000000000
--- a/app/assets/javascripts/ci_variable_list/ci_variable_list.js
+++ b/app/assets/javascripts/ci_variable_list/ci_variable_list.js
@@@ -5,13 -5,11 +5,13 @@@ import setupToggleButtons from '../togg
  import CreateItemDropdown from '../create_item_dropdown';
  import SecretValues from '../behaviors/secret_values';
  
 +const ALL_ENVIRONMENTS_STRING = s__('CiVariable|All environments');
 +
  function createEnvironmentItem(value) {
    return {
 -    title: value === '*' ? s__('CiVariable|All environments') : value,
 +    title: value === '*' ? ALL_ENVIRONMENTS_STRING : value,
      id: value,
-     text: value,
+     text: value === '*' ? s__('CiVariable|* (All environments)') : value,
    };
  }
  
@@@ -108,9 -113,12 +111,18 @@@ export default class VariableList 
      if ($environmentSelect.length) {
        const createItemDropdown = new CreateItemDropdown({
          $dropdown: $environmentSelect,
++<<<<<<< HEAD
 +        defaultToggleLabel: ALL_ENVIRONMENTS_STRING,
 +        fieldName: `${this.formField}[variables_attributes][][environment]`,
 +        getData: (term, callback) => callback(this.getEnvironmentValues()),
++=======
+         defaultToggleLabel: s__('CiVariable|All environments'),
+         fieldName: `${this.formField}[variables_attributes][][environment_scope]`,
+         getData: (term, callback) => {
+           const values = this.getEnvironmentValues();
+           callback(values);
+         },
++>>>>>>> Use dynamic variable list in scheduled pipelines and group/project CI secret variables
          createNewItemFromValue: createEnvironmentItem,
          onSelect: () => {
            // Refresh the other dropdowns in the variable list
@@@ -185,11 -203,11 +207,19 @@@
    }
  
    getEnvironmentValues() {
++<<<<<<< HEAD
 +    const valueMap = this.$container.find(this.inputMap.environment.selector).toArray()
 +      .reduce((prevValueMap, envInput) => ({
 +        ...prevValueMap,
 +        [envInput.value]: envInput.value,
 +      }), {});
++=======
+     const valueMap = {};
+     this.$container.find(this.inputMap.environment_scope.selector)
+       .each((index, envInput) => {
+         valueMap[envInput.value] = envInput.value;
+       });
++>>>>>>> Use dynamic variable list in scheduled pipelines and group/project CI secret variables
  
      return Object.keys(valueMap).map(createEnvironmentItem);
    }
diff --cc spec/javascripts/ci_variable_list/ci_variable_list_ee_spec.js
index a8d507c885,cd94882f62..0000000000
--- a/spec/javascripts/ci_variable_list/ci_variable_list_ee_spec.js
+++ b/spec/javascripts/ci_variable_list/ci_variable_list_ee_spec.js
@@@ -2,74 -2,15 +2,84 @@@ import VariableList from '~/ci_variable
  import getSetTimeoutPromise from '../helpers/set_timeout_promise_helper';
  
  describe('VariableList (EE features)', () => {
++<<<<<<< HEAD
++=======
+   preloadFixtures('projects/ci_cd_settings.html.raw');
+ 
++>>>>>>> Use dynamic variable list in scheduled pipelines and group/project CI secret variables
    let $wrapper;
    let variableList;
  
    describe('with all inputs(key, value, protected, environment)', () => {
      beforeEach(() => {
++<<<<<<< HEAD
 +      // This markup will be replaced with a fixture when we can render the
 +      // CI/CD settings page with the new dynamic variable list in https://gitlab.com/gitlab-org/gitlab-ee/merge_requests/4110
 +      $wrapper = $(`<form class="js-variable-list">
 +        <ul>
 +          <li class="js-row">
 +            <div class="ci-variable-body-item">
 +              <input class="js-ci-variable-input-key" name="variables[variables_attributes][][key]">
 +            </div>
 +
 +            <div class="ci-variable-body-item">
 +              <textarea class="js-ci-variable-input-value" name="variables[variables_attributes][][value]"></textarea>
 +            </div>
 +
 +            <div class="ci-variable-body-item ci-variable-protected-item">
 +              <button type="button" class="js-project-feature-toggle project-feature-toggle">
 +                <input
 +                  type="hidden"
 +                  class="js-ci-variable-input-protected js-project-feature-toggle-input"
 +                  name="variables[variables_attributes][][protected]"
 +                  value="true"
 +                />
 +              </button>
 +            </div>
 +
 +            <div class="ci-variable-body-item">
 +              <input type="hidden" name="variables[variables_attributes][][environment]" value="*" />
 +              <div class="dropdown js-variable-environment-dropdown-wrapper">
 +                <button
 +                  type="button"
 +                  class="dropdown-menu-toggle js-variable-environment-toggle"
 +                  data-toggle="dropdown"
 +                >
 +                  <span class="dropdown-toggle-text js-dropdown-toggle-text"></span>
 +                </button>
 +                <div class="dropdown-menu dropdown-select dropdown-menu-selectable">
 +                  <div class="dropdown-input has-value">
 +                    <input type="search" class="dropdown-input-field js-dropdown-input-field">
 +                    <button class="dropdown-input-clear js-dropdown-input-clear">
 +                      Clear search
 +                    </button>
 +                  </div>
 +                  <div class="dropdown-content js-dropdown-content"></div>
 +                  <div class="dropdown-footer">
 +                    <ul class="dropdown-footer-list">
 +                      <li>
 +                        <button class="dropdown-create-new-item-button js-dropdown-create-new-item">
 +                          Create wildcard
 +                          <code class="js-drodpown-create-new-item-slot"></code>
 +                        </button>
 +                      </li>
 +                    </ul>
 +                  </div>
 +                </div>
 +              </div>
 +            </div>
 +
 +            <button type="button" class="js-row-remove-button"></button>
 +          </li>
 +        </ul>
 +        <button type="button" class="js-secret-value-reveal-button">
 +          Reveal values
 +        </button>
 +      </form>`);
++=======
+       loadFixtures('projects/ci_cd_settings.html.raw');
+       $wrapper = $('.js-ci-variable-list-section');
++>>>>>>> Use dynamic variable list in scheduled pipelines and group/project CI secret variables
  
        variableList = new VariableList({
          container: $wrapper,
@@@ -102,12 -43,38 +112,45 @@@
              expect($wrapper.find('.js-row').length).toBe(2);
  
              // Check for the correct default in the new row
++<<<<<<< HEAD
 +            const $environmentInput = $wrapper.find('.js-row:last-child').find('input[name="variables[variables_attributes][][environment]"]');
++=======
+             const $environmentInput = $wrapper.find('.js-row:last-child').find('input[name="variables[variables_attributes][][environment_scope]"]');
++>>>>>>> Use dynamic variable list in scheduled pipelines and group/project CI secret variables
              expect($environmentInput.val()).toBe('*');
            })
            .then(done)
            .catch(done.fail);
        });
++<<<<<<< HEAD
++=======
+ 
+       it('should update dropdown with new environment values and remove values when row is removed', (done) => {
+         addRowByNewEnvironment('someenv');
+ 
+         const $row = $wrapper.find('.js-row:last-child');
+         $row.find('.js-variable-environment-toggle').click();
+ 
+         getSetTimeoutPromise()
+           .then(() => {
+             const $dropdownItemsBeforeRemove = $row.find('.js-variable-environment-dropdown-wrapper .dropdown-content a');
+             expect($dropdownItemsBeforeRemove.length).toBe(2);
+             expect($dropdownItemsBeforeRemove[0].textContent.trim()).toBe('someenv');
+             expect($dropdownItemsBeforeRemove[1].textContent.trim()).toBe('* (All environments)');
+ 
+             $wrapper.find('.js-row-remove-button').trigger('click');
+ 
+             expect($wrapper.find('.js-row').length).toBe(0);
+           })
+           .then(() => {
+             const $dropdownItemsAfterRemove = $row.find('.js-variable-environment-dropdown-wrapper .dropdown-content a');
+             expect($dropdownItemsAfterRemove.length).toBe(1);
+             expect($dropdownItemsAfterRemove[0].textContent.trim()).toBe('* (All environments)');
+           })
+           .then(done)
+           .catch(done.fail);
+       });
++>>>>>>> Use dynamic variable list in scheduled pipelines and group/project CI secret variables
      });
    });
  });
